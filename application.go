package main

// 1
import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/aniket0951/testproject/repositories"
	"github.com/aniket0951/testproject/services"

	dbconfig "github.com/aniket0951/testproject/db-config"
	"github.com/aniket0951/testproject/models"
	"github.com/aniket0951/testproject/proxyapis"
	"github.com/gin-gonic/gin"
	"github.com/mashingan/smapping"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

type AutoGenerated struct {
	Root struct {
		VehicleData []struct {
			VehicleName       string        `json:"Vehicle_Name"`
			Company           string        `json:"Company"`
			Temperature       string        `json:"Temperature"`
			Latitude          string        `json:"Latitude"`
			GPS               string        `json:"GPS"`
			VehicleNo         string        `json:"Vehicle_No"`
			Door1             string        `json:"Door1"`
			Door4             string        `json:"Door4"`
			Branch            string        `json:"Branch"`
			Vehicletype       string        `json:"Vehicletype"`
			Door2             string        `json:"Door2"`
			Door3             string        `json:"Door3"`
			GPSActualTime     string        `json:"GPSActualTime"`
			Datetime          string        `json:"Datetime"`
			Status            string        `json:"Status"`
			DeviceModel       string        `json:"DeviceModel"`
			Speed             string        `json:"Speed"`
			AC                string        `json:"AC"`
			Imeino            string        `json:"Imeino"`
			Odometer          string        `json:"Odometer"`
			POI               string        `json:"POI"`
			DriverMiddleName  string        `json:"Driver_Middle_Name"`
			Longitude         string        `json:"Longitude"`
			ImmobilizeState   string        `json:"Immobilize_State"`
			IGN               string        `json:"IGN"`
			DriverFirstName   string        `json:"Driver_First_Name"`
			Angle             string        `json:"Angle"`
			SOS               string        `json:"SOS"`
			Fuel              []interface{} `json:"Fuel"`
			BatteryPercentage string        `json:"battery_percentage"`
			ExternalVolt      string        `json:"ExternalVolt"`
			DriverLastName    string        `json:"Driver_Last_Name"`
			Power             string        `json:"Power"`
			Location          string        `json:"Location"`
		} `json:"VehicleData"`
	} `json:"root"`
}

type VehiclesData struct {
	Id                primitive.ObjectID `json:"id,omitempty" bson:"_id"`
	VehicleName       string             `json:"Vehicle_Name,omitempty" bson:"vehiclename"`
	Company           string             `json:"Company,omitempty" bson:"company"`
	Temperature       string             `json:"Temperature,omitempty" bson:"temperature"`
	Latitude          string             `json:"Latitude,omitempty" bson:"latitude"`
	GPS               string             `json:"GPS,omitempty" bson:"gps"`
	VehicleNo         string             `json:"Vehicle_No,omitempty" bson:"vehicleno"`
	Door1             string             `json:"Door1,omitempty" bson:"door1"`
	Door4             string             `json:"Door4,omitempty" bson:"door4"`
	Branch            string             `json:"Branch,omitempty" bson:"branch"`
	Vehicletype       string             `json:"Vehicletype,omitempty" bson:"vehicletype"`
	Door2             string             `json:"Door2,omitempty" bson:"door2"`
	Door3             string             `json:"Door3,omitempty" bson:"door3"`
	GPSActualTime     string             `json:"GPSActualTime,omitempty" bson:"gpsactualtime"`
	Datetime          string             `json:"Datetime,omitempty" bson:"datetime"`
	Status            string             `json:"Status,omitempty" bson:"status"`
	DeviceModel       string             `json:"DeviceModel,omitempty" bson:"devicemodel"`
	Speed             string             `json:"Speed,omitempty" bson:"speed"`
	AC                string             `json:"AC,omitempty" bson:"ac"`
	Imeino            string             `json:"Imeino,omitempty" bson:"imeino"`
	Odometer          string             `json:"Odometer,omitempty" bson:"odometer"`
	POI               string             `json:"POI,omitempty" bson:"poi"`
	DriverMiddleName  string             `json:"Driver_Middle_Name,omitempty" bson:"drivermiddlename"`
	Longitude         string             `json:"Longitude,omitempty" bson:"longitude"`
	ImmobilizeState   string             `json:"Immobilize_State,omitempty" bson:"immobilizestate"`
	IGN               string             `json:"IGN,omitempty" bson:"ign"`
	DriverFirstName   string             `json:"Driver_First_Name,omitempty" bson:"driverfirstname"`
	Angle             string             `json:"Angle,omitempty" bson:"angle"`
	SOS               string             `json:"SOS,omitempty" bson:"sos"`
	Fuel              []interface{}      `json:"Fuel,omitempty" bson:"fuel"`
	BatteryPercentage string             `json:"battery_percentage,omitempty" bson:"batterypercentage"`
	ExternalVolt      string             `json:"ExternalVolt,omitempty" bson:"externalvolt"`
	DriverLastName    string             `json:"Driver_Last_Name,omitempty" bson:"driverlastname"`
	Power             string             `json:"Power,omitempty" bson:"power"`
	Location          string             `json:"Location,omitempty" bson:"location"`
	TimeStamp         primitive.DateTime `json:"timeStamp" bson:"timeStamp"`
	CreatedAt         time.Time          `bson:"createdAt" json:"createdAt"`
	UpdatedAt         time.Time          `bson:"updatedAt" json:"updatedAt"`
}

var (
	Log *log.Logger
)

func LoggerFile(msg string) *os.File {
	// set location of log file
	LOG_FILE := "./logger/info.log"
	// open log file
	logFile, err := os.OpenFile(LOG_FILE, os.O_APPEND|os.O_RDWR|os.O_CREATE, 0644)
	if err != nil {
		log.Panic(err)
	}
	defer logFile.Close()

	// Set log out put and enjoy :)
	log.SetOutput(logFile)

	// optional: log date-time, filename, and line number
	log.SetFlags(log.Lshortfile | log.LstdFlags)

	return logFile

}

func GetVehicleData() {
	reqURL := "http://fusioniot.mobilogix.com/webservice?token=getLiveData&user=skroman@mautoafrica.com&pass=Mauto@777&vehicle_no=DG5181-TOGO&format=json"
	resp, err := http.Get(reqURL)
	if err != nil {
		log.Fatal("error", err.Error())
		fmt.Println("error from err", err.Error())
	}

	defer resp.Body.Close()

	body, parsing_err := ioutil.ReadAll(resp.Body)

	if parsing_err != nil {
		log.Fatal("parsing error", err)
		fmt.Println("error from parsing err", parsing_err.Error())
	}

	content := string(body)
	var jsonMap AutoGenerated
	json.Unmarshal([]byte(content), &jsonMap)

	SaveData(jsonMap)

}

func GetAllVehicles() {
	reqURL := "http://fusioniot.mobilogix.com/webservice?token=getLiveData&user=skroman@mautoafrica.com&pass=Mauto@777"

	requestChannel := make(chan models.AutoGenerated)
	go proxyapis.GetAllVehicels(reqURL, requestChannel)

	new_data := []interface{}{}

	for i := range requestChannel {
		for ik := range i.Root.VehicleData {

			vehicleToInsert := models.VehiclesData{}
			smapping_err := smapping.FillStruct(&vehicleToInsert, smapping.MapFields(i.Root.VehicleData[ik]))

			if smapping_err != nil {
				log.Fatal("smapping error == >", smapping_err)
			}

			vehicleToInsert.TimeStamp = primitive.NewDateTimeFromTime(time.Now().Local().UTC())
			vehicleToInsert.Id = primitive.NewObjectID()

			new_data = append(new_data, vehicleToInsert)
		}
	}

	SaveMultiple(new_data)
}

func SaveMultiple(newData []interface{}) {

	ctx, cancel := context.WithTimeout(context.Background(), 1*time.Minute)
	defer cancel()
	var client = dbconfig.ResolveClientDB()
	if client != nil {
		var vehicleconnection *mongo.Collection = (*mongo.Collection)(client.Database("mautodb").Collection("vehicles"))
		_, inserror := vehicleconnection.InsertMany(ctx, newData)

		if inserror != nil {
			LoggerFile("Insertation Error ==> " + inserror.Error())
		}
		LoggerFile("Inserted ids => ")
	}

}

func SaveData(jsonmap AutoGenerated) {
	client := dbconfig.ResolveClientDB()
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	if client != nil {
		var companyCollection *mongo.Collection = (*mongo.Collection)(client.Database("mautodb").Collection("vehicles"))
		if len(jsonmap.Root.VehicleData) > 0 {
			vehicledata := VehiclesData{}
			smapping.FillStruct(&vehicledata, smapping.MapFields(&jsonmap.Root.VehicleData[0]))
			vehicledata.Id = primitive.NewObjectID()
			vehicledata.TimeStamp = primitive.NewDateTimeFromTime(time.Now())
			vehicledata.CreatedAt = time.Now()
			vehicledata.UpdatedAt = time.Now()

			res, err := companyCollection.InsertOne(ctx, &vehicledata)

			if err != nil {
				LoggerFile("Insertation Error ==> " + err.Error())
			}
			str := fmt.Sprintf("%v", res.InsertedID)

			LoggerFile("insert success ==> " + str)
		}
	} else {
		LoggerFile("client connection faied...")
	}
}

const (
	ContentTypeBinary = "application/octet-stream"
	ContentTypeForm   = "application/x-www-form-urlencoded"
	ContentTypeJSON   = "application/json"
	ContentTypeHTML   = "text/html; charset=utf-8"
	ContentTypeText   = "text/plain; charset=utf-8"
)

func main() {

	router := gin.Default()
	var vehicleRepo repositories.VehicleRepository = repositories.NewVehicleRepository()
	var vehicleService services.VehicleServices = services.NewVehicleService(vehicleRepo)
	// var vehicleController controllers.VehicleController = controllers.NewVehicleController(vehicleService)

	router.POST("/scheduled", func(ctx *gin.Context) {
		//vehicleController.AddVehicleLocationData()
	})

	router.POST("/get-vehicle-Info", func(ctx *gin.Context) {
		fmt.Println("Get vehicle info cron run ...")
		err := vehicleService.RefreshVehicleData()
		fmt.Println(err)

	})

	router.POST("/track-vehicle-alert", func(ctx *gin.Context) {
		fmt.Println("tracker cron run..")
		// _ = vehicleService.TrackVehicleAlert()
	})

	router.POST("/alert-history", func(ctx *gin.Context) {
		fmt.Println("Alert history run..")
		err := vehicleService.CreateVehicleAlertHistory()
		fmt.Println(err)
	})

	err := router.Run(":5000")
	if err != nil {
		fmt.Println(err)
	}

}
